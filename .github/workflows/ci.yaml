name: Build and Test
on:
  push:
    branches:
      - main
      - release/v*
    paths:
      - 'app/**'
      - 'tests/**'
      - 'config.py'
      - 'requirements.txt'
      - 'dev-requirements.txt'
  pull_request:
    branches:
      - main
      - release/v*
    paths:
      - 'app/**'
      - 'tests/**'
      - 'config.py'
      - 'requirements.txt'
      - 'dev-requirements.txt'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.11.2
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.2'
          cache: 'pip'
      - name: Install Dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Lint code with Ruff
        run: ruff check --output-format=github
        continue-on-error: true

      - name: Check code formatting (don't fail)
        run: ruff format --diff
        continue-on-error: true
      - name: Check code formatting with Ruff
        run: ruff format --diff

      - name: Run type checking with Pyright
        run: pyright
        continue-on-error: false

  # Run tests
  Test:
    runs-on: ubuntu-latest
    needs: Lint
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.11.2
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.2'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Run tests with pytest
        run: |
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-report=term
      - name: Display coverage summary Github Steps Summary
        run: |
          echo '# Test Coverage Report' >> $GITHUB_STEP_SUMMARY
          echo '---' >> $GITHUB_STEP_SUMMARY
          coverage report >> $GITHUB_STEP_SUMMARY
        # always show coverage report in summary
        if: ${{ always() }}

      - name: Pytest coverage comment in PR
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: coverage.xml
          title: Pytest Coverage Report
          create-new-comment: true
          junitxml-path: junit/test-results.xml
          junitxml-title: Pytest Unit Tests Summary
          report-only-changed-files: true
        # only run this step for PRs
        if: ${{ github.event_name == 'pull_request' }} 

  Build_and_Push:
    runs-on: ubuntu-latest
    needs: Test
    # only run if branch is main or release/v*
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

        # setup QEMU to build Multi-platform images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
