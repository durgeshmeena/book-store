name: Azure Intra Setup
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to perform'
        required: false
        type: choice
        options:
          - None(default)
          - Create Azure Storage Account and Container for Terraform backend
          - Provision VM and Networking resources
          - Create Cluster
          - All (Create Storage, Provision VM and Create Cluster)
          - Destroy all resources
        default: 'None(default)'

permissions:
  contents: write
  id-token: write
  actions: write

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

jobs:
  azure-storage:
    if: ${{ github.event.inputs.action == 'Create Azure Storage Account and Container for Terraform backend' || github.event.inputs.action == 'All (Create Storage, Provision VM and Create Cluster)' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.1

      - name: Initialize Terraform
        working-directory: ./terraform/azure-remote-storage
        run: terraform init
      
      - name: Apply Terraform
        working-directory: ./terraform/azure-remote-storage
        run: terraform apply -auto-approve

      - name: Get and add ARM_ACCESS_KEY to repo secrets
        working-directory: ./terraform/azure-remote-storage
        env:
          GH_TOKEN: ${{ secrets.GIT_ACTION_GITHUB_TOKEN }}
        run: |
          RESOURCE_GROUP_NAME=tf-devops-rg
          STORAGE_ACCOUNT_NAME=tfdevopsstorage
          CONTAINER_NAME=tfstate

          ACCESS_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' --output tsv)
          echo "$ACCESS_KEY" | gh secret set ARM_ACCESS_KEY --repo ${{ github.repository }}


  vm-provision:
    needs: [azure-storage]
    if: |
      (${{ github.event.inputs.action == 'Provision VM and Networking resources' || github.event.inputs.action == 'All (Create Storage, Provision VM and Create Cluster)' }}) &&
      (${{ !cancelled() }}) &&
      (${{needs.azure-storage.result == 'success' || needs.azure-storage.result == 'skipped'}})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.1 
          
      - name: Initialize Terraform
        working-directory: ./terraform/vm-provision
        run: terraform init

      - name: Apply Terraform
        working-directory: ./terraform/vm-provision
        run: terraform apply -auto-approve

  cluster-creation:
    needs: [azure-storage, vm-provision]
    if: |
      (${{ inputs.action == 'Create Cluster' || inputs.action == 'All (Create Storage, Provision VM and Create Cluster)' }}) &&
      (${{ !cancelled() }}) &&
      (${{needs.azure-storage.result == 'success' || needs.azure-storage.result == 'skipped'}}) &&
      (${{needs.vm-provision.result == 'success' || needs.vm-provision.result == 'skipped'}})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.1

      - name: Initialize Terraform
        working-directory: ./terraform/cluster-creation
        run: terraform init

      - name: Apply Terraform
        working-directory: ./terraform/cluster-creation
        run: terraform apply -auto-approve

      - name: Save kubeconfig(base64) to GitHub Secret
        working-directory: ./terraform/cluster-creation
        env:
          GH_TOKEN: ${{ secrets.GIT_ACTION_GITHUB_TOKEN }}
        run: |
          KUBECONFIG_BASE64=$(base64 -w 0 ./azure-kubeconfig)
          echo "$KUBECONFIG_BASE64" | gh secret set KUBE_CONFIG_DATA --repo ${{ github.repository }}

  destroy-all:
    if: ${{ github.event.inputs.action == 'Destroy all resources' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.1

      - name: Destroy Cluster
        working-directory: ./terraform/cluster-creation
        run: terraform destroy -auto-approve

      - name: Destroy VM and Networking resources
        working-directory: ./terraform/vm-provision
        run: terraform destroy -auto-approve

      - name: Destroy Azure Storage Account and Container for Terraform backend
        working-directory: ./terraform/azure-remote-storage
        run: terraform destroy -auto-approve
      